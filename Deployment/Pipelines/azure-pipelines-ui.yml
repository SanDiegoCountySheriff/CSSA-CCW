# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
   include:
      - main
  paths:
    include:
      - UI/*
      - Deployment/Pipelines/azure-pipeline-ui.yml

variables:
  DATE_COUNTER: $[counter(format('UI{0:yyyy}{0:MM}{0:dd}', pipeline.startTime), 1)]

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: "Building CCW UI Project"
    
    jobs:
      - job: UI_Initialize
        displayName: 'Initializing UI Build'
        steps:
          - checkout: self
            displayName: "Branch Checkout"
            persistCredentials: true
            fetchDepth: 2

          - task: NodeTool@0
            displayName: "Install Node.js"
            inputs:
              versionSpec: '14.x'

          - script: rm -rf "node_modules"
            displayName: "Purge node modules"
            continueOnError: true
            workingDirectory: UI/

          - task: Npm@1
            displayName: "npm ci"
            inputs:
              command: 'ci'
              workingDir: 'UI/'

          - script: npx nx affected --target=build --base=HEAD~1 --parallel
            displayName: "nx build"
            continueOnError: false
            workingDirectory: 'UI/'

          - bash: | 
              if [ -d UI/dist/apps/admin ]
              then
                echo "##vso[task.setVariable variable=ADMIN_EXISTS;isOutput=true]"
                echo "Admin folder exists!"
              else
                echo "##vso[task.setVariable variable=ADMIN_EXISTS;isOutput=false]"
                echo "Admin folder does not exist..."
              fi
            name: check_admin_changes
            displayName: 'Check changed files in Admin'
          
          - bash: | 
              if [ -d UI/dist/apps/public ]
              then
                echo "##vso[task.setVariable variable=PUBLIC_EXISTS;isOutput=true]"
                echo "Public folder exists!"
              else
                echo "##vso[task.setVariable variable=PUBLIC_EXISTS;isOutput=false]"
                echo "Public folder does not exist..."
              fi
            name: check_public_changes
            displayName: 'Check changed files in Public'

      - job: UI_Admin
        displayName: "Building UI Admin"
        dependsOn: UI_Initialize
        condition: eq(dependencies.UI_Initialize.outputs['check_admin_changes.ADMIN_EXISTS'], 'true')
        
        steps:
          - task: CopyFiles@2
            displayName: "Copy Admin Config"
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/UI/apps/admin'
              Contents: '*.config.json'
              TargetFolder: '$(Build.SourcesDirectory)/UI/dist/apps/admin'

          - task: ArchiveFiles@2
            displayName: "Archive Admin Build files"
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/UI/dist/apps/admin'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-admin.zip'
              replaceExistingArchive: true

          - task: ArchiveFiles@2
            displayName: "Archive Admin Config"
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/UI/apps/admin/config'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-admin-config.zip'
              replaceExistingArchive: true

      - job: UI_Public
        displayName: "Building UI Public"
        dependsOn: UI_Initialize
        condition: eq(variables.PUBLIC_EXISTS, 'true')
        #eq($[dependencies.UI_Initialize.outputs['check_public_changes.PUBLIC_EXISTS']], 'true')
        
        steps:
          - task: CopyFiles@2
            displayName: "Copy Public Config"
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/UI/apps/public'
              Contents: '*.config.json'
              TargetFolder: '$(Build.SourcesDirectory)/UI/dist/apps/public'

          - task: ArchiveFiles@2
            displayName: "Archive Public Build Files"
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/UI/dist/apps/public'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-public.zip'
              replaceExistingArchive: true

          - task: ArchiveFiles@2
            displayName: "Archive Public Config"
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/UI/apps/public/config'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-public-config.zip'
              replaceExistingArchive: true

  - stage: Publish
    displayName: "Publishing CCW UI Project"
    
    jobs:
      - job: Publish_Build
        displayName: 'Publishing UI Build'
        steps:

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifacts"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'