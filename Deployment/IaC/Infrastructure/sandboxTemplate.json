{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "include_role_assignments": {
      "type": "bool",
      "defaultValue": true
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "agency_county": {
      "type": "string",
      "defaultValue": ""
    },
    "agency_abbreviation": {
      "type": "string",
      "defaultValue": ""
    },
    "agency_ori": {
      "type": "string",
      "defaultValue": ""
    },
    "application": {
      "defaultValue": "",
      "type": "string"
    },
    "agency_type": {
      "type": "string",
      "defaultValue": ""
    },
    "agancy_size": {
      "type": "string",
      "defaultValue": "medium"
    },
    "asp_sku": {
      "type": "object",
      "defaultValue": {
        "sku_name": "p2v3",
        "sku_size": 1
      }
    },
    "criticality": {
      "type": "string",
      "defaultValue": ""
    },
    "data_classification": {
      "type": "string",
      "defaultValue": ""
    },
    "environment_type": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "DEV",
        "QA",
        "UAT",
        "PROD"
      ]
    },
    "owner_name": {
      "type": "string",
      "defaultValue": ""
    },
    "start_date": {
      "type": "string",
      "defaultValue": ""
    },
    "instance_number": {
      "type": "string",
      "defaultValue": "1"
    },
    "glocation": {
      "defaultValue": "Global",
      "type": "string"
    },
    "user_tags": {
      "type": "Object",
      "defaultValue": {}
    },
    "admin_app_domain_type": {
      "type": "string"
    },
    "admin_certificate_key_vault_rid": {
      "defaultValue": "",
      "type": "string"
    },
    "admin_certificate_secret_name": {
      "defaultValue": "star-cssa-cloud",
      "type": "string"
    },
    "admin_primary_domain": {
      "defaultValue": "cssa.cloud",
      "type": "string"
    },
    "admin_app_cname_alias": {
      "defaultValue": "ccw",
      "type": "string"
    },
    "admin_auth_fqdn": {
      "type": "string"
    },
    "admin_auth_app_id": {
      "type": "string"
    },
    "admin_auth_tenant_id": {
      "type": "string"
    },
    "admin_auth_authority": {
      "type": "string"
    },
    "public_app_domain_type": {
      "type": "string"
    },
    "public_certificate_key_vault_rid": {
      "defaultValue": "",
      "type": "string"
    },
    "public_certificate_secret_name": {
      "defaultValue": "star-cssa-cloud",
      "type": "string"
    },
    "public_primary_domain": {
      "defaultValue": "cssa.cloud",
      "type": "string"
    },
    "public_app_cname_alias": {
      "defaultValue": "ccw",
      "type": "string"
    },
    "public_auth_fqdn": {
      "type": "string"
    },
    "public_auth_app_id": {
      "type": "string"
    },
    "public_auth_tenant_id": {
      "type": "string"
    },
    "public_auth_authority": {
      "type": "string"
    },
    "enable_stop_debugger": {
      "type": "bool",
      "defaultValue": false
    },
    "storage_ep_suff": {
      "defaultValue": "core.usgovcloudapi.net",
      "type": "string"
    },
    "use32BitWorkerProcess": {
      "defaultValue": false,
      "type": "bool"
    },
    "linuxFxVersion": {
      "defaultValue": "DOTNETCORE|6.0",
      "type": "string"
    },
    "actionGroups_Application_Insights_Smart_Detection_name": {
      "defaultValue": "Application Insights Smart Detection",
      "type": "string"
    },
    "kv_tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    }
  },
  "variables": {
    "rn_appServicePlan": "asp",
    "rn_webApp": "wa",
    "rn_funcApp": "fa",
    "rn_appInsights": "ai",
    "rn_cosmosDB": "cdb",
    "rn_storageacct": "sa",
    "rn_keyvault": "kv",
    "rn_loganalytics": "law",
    "rn_vnet": "vnet",
    "rn_subnet": "snet",
    "rn_nsg": "nsg",
    "rn_privateendpoint": "pe",
    "rn_pe_nic": "pe-nic",

    "ai_admin_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-admin-', parameters('instance_number')))]",
    "ai_applicaton_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-application-', parameters('instance_number')))]",
    "ai_document_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-document-', parameters('instance_number')))]",
    "ai_payment_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-payment-', parameters('instance_number')))]",
    "ai_schedule_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-schedule-', parameters('instance_number')))]",
    "ai_userprofile_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-userprofile-', parameters('instance_number')))]",
    "ai_fa_reminders_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-fa-reminders-', parameters('instance_number')))]",

    "keyvault_name": "[toLower(concat(variables('rn_keyvault'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "kv_user_role_id": "4633458b-17de-408a-b874-0445c86b69e6",
    "KeyVaultSecretsUser": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('kv_user_role_id'))]",

    "cosmosdb_name": "[toLower(concat(variables('rn_cosmosDB'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "cdb_kv_connstring_primary_name": "cosmos-db-connection-primary",
    "cdb_kv_connstring_secondary_name": "cosmos-db-connection-secondary",
    "cdb_kv_primary_name": "cosmos-db-primary",
    "cdb_kv_secondary_name": "cosmos-db-secondary",
    "cdb_settings_db_name": "settings-db",
    "cdb_appointments_db_name": "appointment-db",
    "cdb_users_db_name": "user-db",
    "cdb_agencies_container_name": "agency",
    "cdb_appointments_container_name": "appointments",
    "cdb_applications_container_name": "applications",
    "cdb_users_container_name": "users",

    "logAnalytics_nsgfl_name": "[toLower(concat(variables('rn_loganalytics'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-nsg-fl-', parameters('instance_number')))]",
    "logAnalytics_reslogs_name": "[toLower(concat(variables('rn_loganalytics'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-resource-logs-', parameters('instance_number')))]",
    "logAnalytics_weblogs_name": "[toLower(concat(variables('rn_loganalytics'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-web-logs-', parameters('instance_number')))]",

    "asp_wa_name": "[toLower(concat(variables('rn_appServicePlan'), '-', variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "asp_fa_reminders_name": "[toLower(concat(variables('rn_appServicePlan'), '-', variables('rn_funcApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",

    "wa_httplog_retention_days": "7",
    "wa_admin_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-admin-', parameters('instance_number')))]",
    "wa_admin_roledefname": "[guid(resourceId('Microsoft.Web/sites', variables('wa_admin_name')), variables('kv_user_role_id'), resourceGroup().id)]",
    "wa_application_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-application-', parameters('instance_number')))]",
    "wa_application_roledefname": "[guid(resourceId('Microsoft.Web/sites', variables('wa_application_name')), variables('kv_user_role_id'), resourceGroup().id)]",
    "wa_document_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-document-', parameters('instance_number')))]",
    "wa_document_roledefname": "[guid(resourceId('Microsoft.Web/sites', variables('wa_document_name')), variables('kv_user_role_id'), resourceGroup().id)]",
    "wa_payment_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-payment-', parameters('instance_number')))]",
    "wa_payment_roledefname": "[guid(resourceId('Microsoft.Web/sites', variables('wa_payment_name')), variables('kv_user_role_id'), resourceGroup().id)]",
    "wa_schedule_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-schedule-', parameters('instance_number')))]",
    "wa_schedule_roledefname": "[guid(resourceId('Microsoft.Web/sites', variables('wa_schedule_name')), variables('kv_user_role_id'), resourceGroup().id)]",
    "wa_userprofile_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-userprofile-', parameters('instance_number')))]",
    "wa_userprofile_roledefname": "[guid(resourceId('Microsoft.Web/sites', variables('wa_userprofile_name')), variables('kv_user_role_id'), resourceGroup().id)]",

    "fa_reminders_name": "[toLower(concat(variables('rn_funcApp'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-reminder-', parameters('instance_number')))]",

    "wa_hostnamessl_ep_suff": ".azurewebsites.us",
    "wa_hostnamessl_scm_ep_suff": ".scm.azurewebsites.us",

    "sa_sws_adminui_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('agency_type'), parameters('application'), parameters('environment_type'), 'a'))]",
    "sa_sws_publicui_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('agency_type'), parameters('application'), parameters('environment_type'), 'p'))]",
    "sa_content_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('agency_type'), parameters('application'), parameters('environment_type'), 'c'))]",
    "sa_func_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('agency_type'), parameters('application'), parameters('environment_type'), 'f'))]",
    "sa_nsgflow_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('agency_type'), parameters('application'), parameters('environment_type'), 'l'))]",
    "sa_ct_agency_name": "ccw-agency-documents",
    "sa_ct_public_name": "ccw-public-documents",
    "sa_ct_connstring_primary_name": "storage-ct-connection-primary",
    "sa_ct_connstring_secondary_name": "storage-ct-connection-secondary",
    "sa_ct_primary_key_name": "storage-ct-primary",
    "sa_ct_secondary_key_name": "storage-ct-secondary",

    "vnet_name": "[toLower(concat(variables('rn_vnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "sn_kv_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-kv-', parameters('instance_number')))]",
    "sn_content_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-ct-', parameters('instance_number')))]",
    "sn_cosmosdb_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-cdb-', parameters('instance_number')))]",
    "sn_nsgflow_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-nsgfl-', parameters('instance_number')))]",
    "sn_webapp_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-', parameters('instance_number')))]",
    "sn_funcapp_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-fa-', parameters('instance_number')))]",
    "sn_vni_name": "[toLower(concat(variables('rn_subnet'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-vni-', parameters('instance_number')))]",

    "nsg_kv_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-kv-', parameters('instance_number')))]",
    "nsg_content_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-ct-', parameters('instance_number')))]",
    "nsg_cosmosdb_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-cdb-', parameters('instance_number')))]",
    "nsg_nsgflow_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-fl-', parameters('instance_number')))]",
    "nsg_funcapp_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-fa-', parameters('instance_number')))]",
    "nsg_webapp_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-', parameters('instance_number')))]",
    "nsg_vni_name": "[toLower(concat(variables('rn_nsg'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-vni-', parameters('instance_number')))]",

    "privateDnsZones_privatelink_name": "privatelink.azurewebsites.us",
    "privateDnsZones_privatelink_blobcore_name": "privatelink.blob.core.usgovcloudapi.net",
    "privateDnsZones_privatelink_documents_name": "privatelink.documents.azure.us",
    "privateDnsZones_privatelink_vaultcore_name": "privatelink.vaultcore.usgovcloudapi.net",
    "privateDnsZones_privatelink_webcore_name": "privatelink.webcore.usgovcloudapi.net",

    "pe_cdb_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-cdb-', parameters('instance_number')))]",
    "pe_kv_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-kv-', parameters('instance_number')))]",
    "pe_sa_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-sa-', parameters('instance_number')))]",
    "pe_wa_admin_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-admin-', parameters('instance_number')))]",
    "pe_wa_application_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-application-', parameters('instance_number')))]",
    "pe_wa_document_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-document-', parameters('instance_number')))]",
    "pe_wa_payment_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-payment-', parameters('instance_number')))]",
    "pe_wa_schedule_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-schedule-', parameters('instance_number')))]",
    "pe_wa_userprofile_name": "[toLower(concat(variables('rn_privateendpoint'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-userprofile-', parameters('instance_number')))]",

    "pe_cdb_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-cdb-', parameters('instance_number')))]",
    "pe_kv_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-kv-', parameters('instance_number')))]",
    "pe_sa_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-sa-', parameters('instance_number')))]",
    "pe_wa_admin_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-admin-', parameters('instance_number')))]",
    "pe_wa_application_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-application-', parameters('instance_number')))]",
    "pe_wa_document_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-document-', parameters('instance_number')))]",
    "pe_wa_payment_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-payment-', parameters('instance_number')))]",
    "pe_wa_schedule_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-schedule-', parameters('instance_number')))]",
    "pe_wa_userprofile_nic_name": "[toLower(concat(variables('rn_pe_nic'), '-', parameters('agency_abbreviation'), parameters('agency_type'), '-', parameters('application'), '-', parameters('environment_type'), '-wa-userprofile-', parameters('instance_number')))]",

    "vnet_env_number": "[
      if(equals(parameters('environment_type'),'DEV'), '0',
        if(equals(parameters('environment_type'),'QA'), '1', 
          if(equals(parameters('environment_type'),'UAT'), '2', 
          '3'
          )
        )
      )
      ]",
    "vnet_addresses": "[concat('192.168.', variables('vnet_env_number'), '.0/24')]",
    "kv_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.0/28')]",
    "ct_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.48/28')]",
    "cdb_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.16/28')]",
    "nsgfl_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.64/28')]",
    "func_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.80/28')]",
    "web_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.32/28')]",
    "vni_subnet_addressprefix": "[concat('192.168.', variables('vnet_env_number'), '.96/28')]",

    "default_tags": {
      "application_name": "ccw",
      "agency": "[if(empty(parameters('agency_abbreviation')), resourceGroup().tags.agency_name, parameters('agency_abbreviation')) ]",
      "agency_ori": "[if(empty(parameters('agency_ori')), resourceGroup().tags.agency_ori, parameters('agency_ori')) ]",
      "business_unit": "[if(empty(parameters('agency_type')), resourceGroup().tags.business_unit, parameters('agency_type')) ]",
      "criticality": "[if(empty(parameters('criticality')), resourceGroup().tags.criticality, parameters('criticality')) ]",
      "data_classification": "[if(empty(parameters('data_classification')), resourceGroup().tags.data_classification, parameters('data_classification')) ]",
      "environment": "[if(empty(parameters('environment_type')), resourceGroup().tags.environment, parameters('environment_type')) ]",
      "owner_name": "[if(empty(parameters('owner_name')), resourceGroup().tags.owner_name, parameters('owner_name')) ]",
      "start_date": "[if(empty(parameters('start_date')), resourceGroup().tags.start_date, parameters('start_date')) ]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2019-06-01",
      "name": "[parameters('actionGroups_Application_Insights_Smart_Detection_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/actionGroups'), parameters('user_tags')['Microsoft.Insights/actionGroups'], json('{}')))]",
      "properties": {
        "groupShortName": "SmartDetect",
        "enabled": true,
        "emailReceivers": [],
        "smsReceivers": [],
        "webhookReceivers": [],
        "itsmReceivers": [],
        "azureAppPushReceivers": [],
        "automationRunbookReceivers": [],
        "voiceReceivers": [],
        "logicAppReceivers": [],
        "azureFunctionReceivers": [],
        "armRoleReceivers": [
          {
            "name": "Monitoring Contributor",
            "roleId": "749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "useCommonAlertSchema": true
          },
          {
            "name": "Monitoring Reader",
            "roleId": "43d0d8ad-25c7-4714-9337-8ba259a9fe05",
            "useCommonAlertSchema": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_kv_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_content_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_cosmosdb_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_nsgflow_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_funcapp_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_vni_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsg_webapp_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": [
          {
            "name": "sg_AzureActiveDirectory",
            "properties": {
              "description": "Allows Azure Active Directory",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 4001,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureBackup",
            "properties": {
              "description": "Allows Azure Backup Traffic",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureBackup",
              "access": "Allow",
              "priority": 4002,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureCloud",
            "properties": {
              "description": "Allows Azure Cloud Traffic",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 4003,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureKeyVault",
            "properties": {
              "description": "Allows Azure Key Vault Traffic",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureKeyVault",
              "access": "Allow",
              "priority": 4004,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureLoadBalancer",
            "properties": {
              "description": "Allows Azure Load Balancer Traffic",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureLoadBalancer",
              "access": "Allow",
              "priority": 4005,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureMonitor",
            "properties": {
              "description": "Allows Azure Monitor",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureMonitor",
              "access": "Allow",
              "priority": 4006,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureResourceManager",
            "properties": {
              "description": "Allows Azure Resource Manager",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureResourceManager",
              "access": "Allow",
              "priority": 4008,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_GatewayManager",
            "properties": {
              "description": "Allows Gateway Manager",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "GatewayManager",
              "access": "Allow",
              "priority": 4009,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_Sql",
            "properties": {
              "description": "Allows Sql traffic",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Sql",
              "access": "Allow",
              "priority": 4010,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_SqlManagement",
            "properties": {
              "description": "Allows Sql Management",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "SqlManagement",
              "access": "Allow",
              "priority": 4011,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_Storage",
            "properties": {
              "description": "Allows Azure Storage",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 4012,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_AzureSiteRecovery",
            "properties": {
              "description": "Allows Azure Site Recovery",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 4013,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_EventHub",
            "properties": {
              "description": "Allows Event Hub",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 4014,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "sg_GuestAndHybridManagement",
            "properties": {
              "description": "Allows Guest and Hybrid Management",
              "protocol": "*",
              "sourcePortRange": "0-65535",
              "destinationPortRange": "0-65535",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 4015,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AppGatewayInboundFirewallManagement",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "65200-65353",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 4035,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAnyCustom65200-65353InboundGatewayMgr",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "65200-65353",
              "sourceAddressPrefix": "GatewayManager",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 4045,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowTagCustomAnyOutbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 4055,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('vnet_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_kv_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_content_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_cosmosdb_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_nsgflow_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_funcapp_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_vni_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_webapp_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/virtualNetworks'), parameters('user_tags')['Microsoft.Network/virtualNetworks'], json('{}')))]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [ "[variables('vnet_addresses')]" ]
        },
        "subnets": [
          {
            "name": "[variables('sn_kv_name')]",
            "properties": {
              "addressPrefix": "[variables('kv_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_kv_name'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.KeyVault",
                  "locations": [
                    "*"
                  ]
                }
              ],
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('sn_content_name')]",
            "properties": {
              "addressPrefix": "[variables('ct_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_content_name'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "usgovarizona",
                    "usgovtexas"
                  ]
                }
              ],
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('sn_cosmosdb_name')]",
            "properties": {
              "addressPrefix": "[variables('cdb_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_cosmosdb_name'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": [
                    "*"
                  ]
                }
              ],
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"

            }
          },
          {
            "name": "[variables('sn_nsgflow_name')]",
            "properties": {
              "addressPrefix": "[variables('nsgfl_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_nsgflow_name'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "usgovarizona",
                    "usgovtexas"
                  ]
                }
              ],
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('sn_funcapp_name')]",
            "properties": {
              "addressPrefix": "[variables('func_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_funcapp_name'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Web",
                  "locations": [
                    "*"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('sn_webapp_name')]",
            "properties": {
              "addressPrefix": "[variables('web_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_webapp_name'))]"
              },
              "serviceEndpoints": [],
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('sn_vni_name')]",
            "properties": {
              "addressPrefix": "[variables('vni_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_vni_name'))]"
              },
              "serviceEndpoints": [],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyvault_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_kv_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.KeyVault/vaults'), parameters('user_tags')['Microsoft.KeyVault/vaults'], json('{}')))]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[parameters('kv_tenantId')]",
        "enableRbacAuthorization": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "ipRules": [],
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_kv_name'))]",
              "ignoreMissingVnetServiceEndpoint": true
            }
          ]
        },
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true
      }
    },
    {
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyvault_name'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('wa_userprofile_roledefname')]",
      "condition": "[parameters('include_role_assignments')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('wa_userprofile_name'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('KeyVaultSecretsUser')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/',  variables('wa_userprofile_name')), '2022-03-01','Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "Role assignment condition created with an ARM template"
      }
    },
    {
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyvault_name'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('wa_admin_roledefname')]",
      "condition": "[parameters('include_role_assignments')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('wa_admin_name'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('KeyVaultSecretsUser')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/',  variables('wa_admin_name')), '2022-03-01','Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "Role assignment condition created with an ARM template"
      }
    },
    {
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyvault_name'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('wa_application_roledefname')]",
      "condition": "[parameters('include_role_assignments')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('wa_application_name'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('KeyVaultSecretsUser')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/',  variables('wa_application_name')), '2022-03-01','Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "Role assignment condition created with an ARM template"
      }
    },
    {
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyvault_name'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('wa_document_roledefname')]",
      "condition": "[parameters('include_role_assignments')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('wa_document_name'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('KeyVaultSecretsUser')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/',  variables('wa_document_name')), '2022-03-01','Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "Role assignment condition created with an ARM template"
      }
    },
    {
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyvault_name'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('wa_payment_roledefname')]",
      "condition": "[parameters('include_role_assignments')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('wa_payment_name'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('KeyVaultSecretsUser')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/',  variables('wa_payment_name')), '2022-03-01','Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "Role assignment condition created with an ARM template"
      }
    },
    {
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyvault_name'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('wa_schedule_roledefname')]",
      "condition": "[parameters('include_role_assignments')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('wa_schedule_name'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('KeyVaultSecretsUser')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/',  variables('wa_schedule_name')), '2022-03-01','Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "Role assignment condition created with an ARM template"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalytics_nsgfl_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalytics_reslogs_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalytics_weblogs_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 120,
        "features": {
          "searchVersion": 1,
          "legacy": 0,
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_content_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_content_name'))]",
              "action": "Allow"
            }
          ],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_func_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "resourceAccessRules": [],
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_nsgflow_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_sws_publicui_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_sws_adminui_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "azureFilesIdentityBasedAuthentication": {
          "directoryServiceOptions": "None"
        },
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('asp_wa_name')]",
      "location": "[parameters('location')]",
      "sku": "[parameters('asp_sku')]",
      "kind": "linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('asp_fa_reminders_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "B1",
        "tier": "Basic",
        "size": "B1",
        "family": "B",
        "capacity": 1
      },
      "kind": "linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-08-15",
      "name": "[variables('cosmosdb_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
      ],
      "kind": "GlobalDocumentDB",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts'], json('{}')))]",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
          {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('sn_cosmosdb_name'))]",
            "ignoreMissingVNetServiceEndpoint": true
          }
        ],
        "disableKeyBasedMetadataWriteAccess": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "cors": [],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "ipRules": [
          {
            "ipAddressOrRange": "0.0.0.0"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 60,
            "backupRetentionIntervalInHours": 168
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_appointments_db_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[variables('cdb_appointments_db_name')]"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_settings_db_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[variables('cdb_settings_db_name')]"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_users_db_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[variables('cdb_users_db_name')]"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_primary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').primaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_connstring_primary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listConnectionStrings(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').connectionStrings[0].connectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_secondary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').secondaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_connstring_secondary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listConnectionStrings(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').connectionStrings[1].connectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('sa_ct_connstring_primary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "contentType": "domain storage connection string",
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('sa_content_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name')), '2022-05-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('sa_ct_connstring_secondary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "contentType": "domain storage connection string",
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('sa_content_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name')), '2022-05-01').keys[1].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('sa_ct_primary_key_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "contentType": "domain storage connection string",
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name')), '2022-05-01').keys[0].value]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('sa_ct_secondary_key_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "contentType": "domain storage connection string",
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name')), '2022-05-01').keys[1].value]"
      }
    },

    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_admin_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_applicaton_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_document_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_payment_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_schedule_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_userprofile_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('ai_fa_reminders_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_reslogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_content_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_func_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_func_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_nsgflow_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_nsgflow_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_sws_adminui_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_sws_adminui_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "staticWebsite": {
          "enabled": true,
          "indexDocument": "index.html"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_sws_publicui_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_sws_publicui_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "staticWebsite": {
          "enabled": true,
          "indexDocument": "index.html"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_appointments_db_name'),'/', variables('cdb_appointments_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_appointments_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_appointments_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_settings_db_name'),'/', variables('cdb_agencies_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_settings_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_agencies_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_users_db_name'),'/', variables('cdb_applications_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_users_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_applications_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              },
              {
                "path": "/Application/UserEmail/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_users_db_name'),'/', variables('cdb_users_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_users_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_users_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              },
              {
                "path": "/email/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('wa_admin_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_admin_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('wa_admin_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('wa_admin_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_admin_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_admin_name'))).ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_agencies_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_settings_db_name')]"
            },
            {
              "name": "DiagnosticServices_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            },
            {
              "name": "InstrumentationEngine_EXTENSION_VERSION",
              "value": "disabled"
            },
            {
              "name": "JwtBearerAAD__Authority",
              "value": "[concat(parameters('admin_auth_authority'),'/',parameters('admin_auth_tenant_id'))]"
            },
            {
              "name": "JwtBearerAAD__ValidAudiences",
              "value": "[parameters('admin_auth_app_id')]"
            },
            {
              "name": "JwtBearerB2C__Authority",
              "value": "[concat(parameters('public_auth_authority'),'/',parameters('public_auth_tenant_id'))]"
            },
            {
              "name": "JwtBearerB2C__ValidAudiences",
              "value": "[parameters('public_auth_app_id')]"
            },
            {
              "name": "SnapshotDebugger_EXTENSION_VERSION",
              "value": "disabled"
            },
            {
              "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
              "value": "[variables('wa_httplog_retention_days')]"
            },
            {
              "name": "WEBSITE_HEALTHCHECK_MAXPINGFAILURES",
              "value": "10"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_Mode",
              "value": "Recommended"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
              "value": "disabled"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_PreemptSdk",
              "value": "disabled"
            }
          ],
          "numberOfWorkers": 1,
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true,
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": true,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 0
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "keyVaultReferenceIdentity": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_admin_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_admin_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLogs": {
          "fileSystem": {
            "retentionInMb": 40,
            "enabled": true
          }
        },
        "failedRequestsTracing": {
          "enabled": true
        },
        "detailedErrorMessages": {
          "enabled": true
        },
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 40,
        "publishingUsername": "$variables('wa_admin_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "appCommandLine": "dotnet CCW.Admin.dll",
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "scmMinTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "healthCheckPath": "/health",
        "PreWarmedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_admin_name'), '/', variables('wa_admin_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_admin_name'))]"
      ],
      "properties": {
        "siteName": "[variables('wa_admin_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_admin_name'), '/', variables('sn_vni_name'))]",
      "location": "USGov Arizona",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_admin_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('wa_application_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_applicaton_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('wa_application_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('wa_application_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_applicaton_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_applicaton_name'))).ConnectionString]"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_agencies_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_settings_db_name')]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "keyVaultReferenceIdentity": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_application_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_application_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "httpLoggingEnabled": false,
        "acrUseManagedIdentityCreds": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('wa_application_name')",
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "vnetRouteAllEnabled": false,
        "vnetPrivatePortsCount": 0,
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "managedServiceIdentityId": 3184,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 2147483647,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 2147483647,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "scmMinTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "preWarmedInstanceCount": 0,
        "healthCheckPath": "/api/health",
        "functionsRuntimeScaleMonitoringEnabled": false,
        "minimumElasticInstanceCount": 0,
        "azureStorageAccounts": {}
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_application_name'), '/', variables('wa_application_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_application_name'))]"
      ],
      "properties": {
        "siteName": "[variables('wa_application_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_application_name'), '/', variables('sn_vni_name'))]",
      "location": "USGov Arizona",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_application_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('wa_document_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_document_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts',variables('sa_content_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('wa_document_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('wa_document_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_document_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_document_name'))).ConnectionString]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            },
            {
              "name": "Storage__AgencyContainerName",
              "value": "[variables('sa_ct_agency_name')]"
            },
            {
              "name": "Storage__PublicContainerName",
              "value": "[variables('sa_ct_public_name')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "keyVaultReferenceIdentity": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_document_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_document_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('wa_document_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "PreWarmedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_document_name'), '/', variables('wa_document_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_document_name'))]"
      ],
      "properties": {
        "siteName": "[variables('wa_document_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_document_name'), '/', variables('sn_vni_name'))]",
      "location": "USGov Arizona",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_document_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('wa_payment_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_payment_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('wa_payment_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('wa_payment_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_payment_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_payment_name'))).ConnectionString]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true,
          "numberOfWorkers": 1
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "keyVaultReferenceIdentity": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_payment_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_payment_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('wa_payment_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "scmMinTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "preWarmedInstanceCount": 0,
        "healthCheckPath": "/api/health",
        "functionsRuntimeScaleMonitoringEnabled": false,
        "minimumElasticInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_payment_name'), '/', variables('wa_payment_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_payment_name'))]"
      ],
      "properties": {
        "siteName": "[variables('wa_payment_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_payment_name'), '/', variables('sn_vni_name'))]",
      "location": "USGov Arizona",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_payment_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('wa_schedule_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_schedule_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('wa_schedule_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('wa_schedule_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_schedule_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_schedule_name'))).ConnectionString]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_appointments_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_appointments_db_name')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "numberOfWorkers": 1,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_schedule_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_schedule_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('sites_ccw_textanalytics_fa_reminders_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "PreWarmedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_schedule_name'), '/', variables('wa_schedule_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_schedule_name'))]"
      ],
      "properties": {
        "siteName": "[variables('wa_schedule_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_schedule_name'), '/', variables('sn_vni_name'))]",
      "location": "USGov Arizona",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_schedule_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('wa_userprofile_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_userprofile_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('wa_userprofile_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('wa_userprofile_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_wa_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_userprofile_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_userprofile_name'))).ConnectionString]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_users_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_users_db_name')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "numberOfWorkers": 1,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_userprofile_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_userprofile_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('wa_userprofile_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "PreWarmedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_userprofile_name'), '/', variables('wa_userprofile_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_userprofile_name'))]"
      ],
      "properties": {
        "siteName": "[variables('wa_userprofile_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('wa_userprofile_name'), '/', variables('sn_vni_name'))]",
      "location": "USGov Arizona",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('wa_userprofile_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_vni_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('fa_reminders_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('asp_fa_reminders_name'))]",
        "[resourceId('microsoft.insights/components', variables('ai_fa_reminders_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "kind": "functionapp,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('fa_reminders_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('fa_reminders_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('asp_fa_reminders_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "vnetRouteAllEnabled": true,
        "vnetImagePullEnabled": false,
        "vnetContentShareEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_fa_reminders_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('ai_fa_reminders_name'))).ConnectionString]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_users_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_users_db_name')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "numberOfWorkers": 1,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "functionAppScaleLimit": 0,
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_funcapp_name'))]",
        "minimumElasticInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('fa_reminders_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('fa_reminders_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('fa_reminders_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [
            "https://portal.azure.us"
          ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "PreWarmedInstanceCount": 0,
        "functionAppScaleLimit": 0,
        "functionsRuntimeScaleMonitoringEnabled": false,
        "minimumElasticInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('fa_reminders_name'), '/', variables('fa_reminders_name'), variables('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('fa_reminders_name'))]"
      ],
      "properties": {
        "siteName": "[variables('fa_reminders_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('fa_reminders_name'), '/',variables('sn_funcapp_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('fa_reminders_name'))]"
      ],
      "properties": {
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_funcapp_name'))]",
        "isSwift": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_sws_adminui_name'), '/default/$web')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_sws_adminui_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_sws_adminui_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_sws_publicui_name'), '/default/$web')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_sws_publicui_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_sws_publicui_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_content_name'), '/default/ccw-agency-documents')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_content_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_content_name'), '/default/ccw-public-documents')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_content_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_func_name'), '/default/azure-webjobs-hosts')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_func_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_func_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_func_name'), '/default/azure-webjobs-secrets')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_func_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_func_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_func_name'), '/default/sam-releases')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_func_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_func_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('sa_nsgflow_name'), '/default/insights-logs-networksecuritygroupflowevent')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('sa_nsgflow_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_nsgflow_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZones_privatelink_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_name'), '/', variables('vnet_name'),'-link')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZones_privatelink_blobcore_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_blobcore_name'), '/', variables('vnet_name'),'-link')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_blobcore_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZones_privatelink_documents_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_documents_name'), '/', variables('vnet_name'),'-link')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZones_privatelink_vaultcore_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_vaultcore_name'), '/', variables('vnet_name'),'-link')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_vaultcore_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZones_privatelink_webcore_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_webcore_name'), '/', variables('vnet_name'),'-link')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_webcore_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_cdb_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts',variables('cosmosdb_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_cdb_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_cosmosdb_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_cdb_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts',variables('cosmosdb_name'))]",
              "groupIds": [
                "Sql"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_cdb_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_cdb_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-documents-azure-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_documents_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_kv_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults',variables('keyvault_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_kv_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_kv_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_kv_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults',variables('keyvault_name'))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_kv_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_kv_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-vaultcore-usgovcloudapi-net",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_vaultcore_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_sa_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('sa_content_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_sa_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_content_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_sa_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts',variables('sa_content_name'))]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_sa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_sa_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-blob-core-usgovcloudapi-net",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_blobcore_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_wa_admin_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites',variables('wa_admin_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_wa_admin_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_webapp_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_wa_admin_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites',variables('wa_admin_name'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_wa_admin_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_wa_admin_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_wa_application_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites',variables('wa_application_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_wa_application_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_webapp_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_wa_application_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites',variables('wa_application_name'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_wa_application_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_wa_application_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_wa_document_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites',variables('wa_document_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_wa_document_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_webapp_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_wa_document_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites',variables('wa_document_name'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_wa_document_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_wa_document_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_wa_payment_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites',variables('wa_payment_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_wa_payment_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_webapp_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_wa_payment_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites',variables('wa_payment_name'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_wa_payment_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_wa_payment_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_wa_schedule_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites',variables('wa_schedule_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_wa_schedule_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_webapp_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_wa_schedule_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites',variables('wa_schedule_name'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_wa_schedule_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_wa_schedule_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_name'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[variables('pe_wa_userprofile_name')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-05-01",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites',variables('wa_userprofile_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
      ],
      "properties": {
        "customNetworkInterfaceName": "[variables('pe_wa_userprofile_nic_name')]",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet_name'),variables('sn_webapp_name'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('pe_wa_userprofile_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites',variables('wa_userprofile_name'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[concat(variables('pe_wa_userprofile_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('pe_wa_userprofile_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',variables('privateDnsZones_privatelink_name'))]"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "resourcegroup_name": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "key_vault_name": {
      "type": "string",
      "value": "[variables('keyvault_name')]"
    },
    "subscription": {
      "type": "object",
      "value": "[subscription()]"
    },
    "cosmosdb_name": {
      "type": "string",
      "value": "[variables('cosmosdb_name')]"
    },
    "tags": {
      "type": "Object",
      "value": "[variables('default_tags')]"
    }
  }
}
