{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "functions": [
  ],
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "agency_county": {
      "type": "string"
    },
    "agency_abbreviation": {
      "type": "string"
    },
    "agency_ori": {
      "type": "string"
    },
    "application": {
      "defaultValue": "ccw",
      "type": "string"
    },
    "dept_abbreviation": {
      "type": "string",
      "defaultValue": "it"
    },
    "environment_type": {
      "type": "string",
      "defaultValue": "PROD"
    },
    "instance_number": {
      "type": "string",
      "defaultValue": "001"
    },
    "enable_beats": {
      "type": "bool",
      "defaultValue": false
    },
    "modify_beat_id": {
      "type": "bool",
      "defaultValue": false
    },
    "beat_id_number_of_digits": {
      "type": "int",
      "defaultValue": 1
    },
    "enable_stop_debugger": {
      "type": "bool",
      "defaultValue": false
    },
    "display_reporting_email": {
      "defaultValue": false,
      "type": "bool"
    },
    "reporting_email_address": {
      "defaultValue": "",
      "type": "string"
    },
    "auth_tenant_id": {
      "type": "string"
    },
    "auth_authority": {
      "type": "string"
    },
    "auth_logout_url": {
      "defaultValue": "",
      "type": "string"
    },
    "use_officer_upn": {
      "type": "bool",
      "defaultValue": false
    },
    "doj_sftp_server": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_server_key": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_username": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_password": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_disabled": {
      "type": "string",
      "defaultValue": "false"
    },
    "auth_app_id": {
      "type": "string"
    },
    "auth_fqdn": {
      "type": "string"
    },
    "user_tags": {
      "type": "Object",
      "defaultValue": {}
    },
    "app_domain_type": {
      "type": "string"
    },
    "primary_domain": {
      "defaultValue": "cssa.cloud",
      "type": "string"
    },
    "app_cname_alias": {
      "defaultValue": "ccw",
      "type": "string"
    },
    "certificate_key_vault_rid": {
      "defaultValue": "",
      "type": "string"
    },
    "certificate_secret_name": {
      "defaultValue": "star-cssa-cloud",
      "type": "string"
    },
    "glocation": {
      "defaultValue": "Global",
      "type": "string"
    },
    "storage_ep_suff": {
      "defaultValue": "core.usgovcloudapi.net",
      "type": "string"
    },
    "wa_hostnamessl_ep_suff": {
      "defaultValue": ".azurewebsites.us",
      "type": "string"
    },
    "wa_hostnamessl_scm_ep_suff": {
      "defaultValue": ".scm.azurewebsites.us",
      "type": "string"
    },
    "use32BitWorkerProcess": {
      "defaultValue": false,
      "type": "bool"
    },
    "linuxFxVersion": {
      "defaultValue": "DOTNETCORE|6.0",
      "type": "string"
    },
    "virtualNetworks_vnet_name": {
      "defaultValue": "vnet",
      "type": "string"
    },
    "networkSecurityGroups_vnet_cdb_subnet_nsg_name": {
      "defaultValue": "cdb-nsg",
      "type": "string"
    },
    "actionGroups_Application_Insights_Smart_Detection_name": {
      "defaultValue": "Application Insights Smart Detection",
      "type": "string"
    },
    "accounts_ccwTA_name": {
      "defaultValue": "ta",
      "type": "string"
    },
    "kv_tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "kv_secretsPermissions": {
      "type": "array",
      "defaultValue": [ "Get", "List" ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "kv_keysPermissions": {
      "type": "array",
      "defaultValue": [ "Get", "List" ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "kv_CertPermissions": {
      "type": "array",
      "defaultValue": [ "Get", "List" ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "vaults_kv_secrets_key3": {
      "type": "string",
      "defaultValue": "ccwStorage"
    },
    "vaults_kv_secrets_key4": {
      "type": "string",
      "defaultValue": "takey1"
    },
    "vaults_kv_secrets_key5": {
      "type": "string",
      "defaultValue": "takey2"
    },
    "vaults_kv_secrets_key6": {
      "type": "string",
      "defaultValue": "SftpKey"
    },
    "vaults_kv_secrets_key7": {
      "type": "string",
      "defaultValue": "SftpHost"
    },
    "vaults_kv_secrets_key8": {
      "type": "string",
      "defaultValue": "SftpPassword"
    },
    "vaults_kv_secrets_key9": {
      "type": "string",
      "defaultValue": "SftpUsername"
    },
    // "vaults_kv_secrets_key10": {
    //   "type": "string",
    //   "defaultValue": "CosmosConnectionString"
    // },
    "submission_fa_config_storage_container_prefix_results": {
      "type": "string",
      "defaultValue": "result"
    },
    "submission_fa_config_storage_container_prefix_submissions": {
      "type": "string",
      "defaultValue": "submission"
    },
    "submission_fa_config_storage_container_prefix_cpra": {
      "type": "string",
      "defaultValue": "cpra"
    },
    "doj_environment": {
      "type": "string",
      "defaultValue": "PROD"
    },
    "submission_fa_config_sftp_input_path": {
      "type": "string",
      "defaultValue": "/incoming_to_DOJ/JSON/"
    },
    "submission_fa_config_sftp_output_path": {
      "type": "string",
      "defaultValue": "/responses_from_DOJ/"
    },
    "submission_fa_config_sftp_port": {
      "type": "int",
      "defaultValue": 22
    },
    // "dbaccount_sqlDb_name": {
    //   "type": "string",
    //   "defaultValue": "ccwstops"
    // },
    // "dbaccount_sqlDb_user_container_name": {
    //   "type": "string",
    //   "defaultValue": "userprofile"
    // },
    // "dbaccount_sqlDb_stop_container_name": {
    //   "type": "string",
    //   "defaultValue": "stop"
    // },
    // "dbaccount_sqlDb_stop_audit_container_name": {
    //   "type": "string",
    //   "defaultValue": "stopaudit"
    // },
    // "dbaccount_sqlDb_submission_container_name": {
    //   "type": "string",
    //   "defaultValue": "submission"
    // },
    "privateDnsZones_privatelink_azure_com_name": {
      "defaultValue": "pvtlink.documents.azure.com",
      "type": "string"
    },
    "privateDnsZones_vnetlink_name": {
      "defaultValue": "vnetlink",
      "type": "string"
    },
    "cdb_subnet_name": {
      "type": "string",
      "defaultValue": "-cdb-subnet"
    },
    "prv_dns_soa_name": {
      "defaultValue": "@",
      "type": "string"
    },
    "privateEndpoints_cdb_pe_name": {
      "defaultValue": "cdb-pe",
      "type": "string"
    },
    "Vnet_addressprefixes": {
      "type": "array",
      "defaultValue": [ "172.16.0.0/16" ]
    },
    "cdb_subnet_addressprefix": {
      "defaultValue": "172.16.1.0/24",
      "type": "string"
    },
    "cdb_private_ipaddress1": {
      "defaultValue": "172.16.1.4",
      "type": "string"
    },
    "cdb_private_ipaddress2": {
      "defaultValue": "172.16.1.5",
      "type": "string"
    },
    "utcNowValue": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMDDHHmmssFFFF')]"
    },
    "cssa_subscription_id": {
      "type": "string",
      "defaultValue": "#{CSSA_SUBSCRIPTION_ID}#"
    },
    "cssa_subscription_id_dev": {
      "type": "string",
      "defaultValue": "#{CSSA_SUBSCRIPTION_ID_DEV}#"
    },
    "cssa_subscription_id_uat": {
      "type": "string",
      "defaultValue": "#{CSSA_SUBSCRIPTION_ID_UAT}#"
    }
  },
  "variables": {
    "rn_appConfig": "ac",
    "rn_appServicePlan": "asp",
    "rn_webApp": "wa",
    "rn_appInsights": "ai",
    "rn_cosmosDB": "cdb",
    "rn_storageacct": "sa",
    "rn_keyvault": "kv",
    "rn_loganalytics": "law",

    "appconfig_name": "[toLower(concat(variables('rn_appConfig'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "insights_name": "[toLower(concat(variables('rn_appInsights'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "keyvault_name": "[toLower(concat(variables('rn_keyvault'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",

    "cosmosdb_name": "[toLower(concat(variables('rn_cosmosDB'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "cdb_kv_connstring_primary_name": "cosmos-db-connection-primary",
    "cdb_kv_connstring_secondary_name": "cosmos-db-connection-secondary",
    "cdb_kv_primary_name": "cosmos-db-primary",
    "cdb_kv_secondary_name": "cosmos-db-secondary",
    "cdb_settings_db_name": "settings-db",
    "cdb_appointments_db_name": "appointment-db",
    "cdb_users_db_name": "user-db",
    "cdb_agencies_container_name": "agencies",
    "cdb_appointments_container_name": "appointments",
    "cdb_applications_container_name": "applications",
    "cdb_users_container_name": "users",

    "logAnalytics_nsgfl_name": "[toLower(concat(variables('rn_loganalytics'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-nsg-fl-', parameters('instance_number')))]",
    "logAnalytics_reslogs_name": "[toLower(concat(variables('rn_loganalytics'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-resource-logs-', parameters('instance_number')))]",
    "logAnalytics_weblogs_name": "[toLower(concat(variables('rn_loganalytics'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-web-logs-', parameters('instance_number')))]",

    "appServicePlan_name": "[toLower(concat(variables('rn_appServicePlan'), '-', variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-', parameters('instance_number')))]",
    "api_admin_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-admin-', parameters('instance_number')))]",
    "api_application_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-application-', parameters('instance_number')))]",
    "api_document_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-document-', parameters('instance_number')))]",
    "api_payment_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-payment-', parameters('instance_number')))]",
    "api_schedule_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-schedule-', parameters('instance_number')))]",
    "api_userprofile_name": "[toLower(concat(variables('rn_webApp'), '-', parameters('agency_abbreviation'), '-', parameters('dept_abbreviation'), '-', parameters('application'), '-', parameters('environment_type'), '-userprofile-', parameters('instance_number')))]",
    "wa_hostnamessl_ep_suff": ".azurewebsites.us",
    "wa_hostnamessl_scm_ep_suff": ".scm.azurewebsites.us",

    "sa_sws_adminui_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('dept_abbreviation'), parameters('application'), parameters('environment_type'), 'aui', parameters('instance_number')))]",
    "sa_sws_publicui_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('dept_abbreviation'), parameters('application'), parameters('environment_type'), 'pui', parameters('instance_number')))]",
    "sa_content_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('dept_abbreviation'), parameters('application'), parameters('environment_type'), 'ct', parameters('instance_number')))]",
    "sa_func_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('dept_abbreviation'), parameters('application'), parameters('environment_type'), 'func', parameters('instance_number')))]",
    "sa_nsgflow_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('dept_abbreviation'), parameters('application'), parameters('environment_type'), 'nsgfl', parameters('instance_number')))]",
    "sa_reslog_name": "[toLower(concat(variables('rn_storageacct'), parameters('agency_abbreviation'), parameters('dept_abbreviation'), parameters('application'), parameters('environment_type'), 'rs', parameters('instance_number')))]",
    "sa_ct_agency_name": "ccw-agency-documents",
    "sa_ct_public_name": "ccw-public-documents",

    "networkSecurityGroups_ccw_vnet_cdb_subnet_nsg_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('networkSecurityGroups_vnet_cdb_subnet_nsg_name'))]",
    // "serverfarms_userprofile_ASP_ccwrg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_userprofile_ASP_name'))]",
    // "serverfarms_domain_ASP_ccwrg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_domain_ASP_name'))]",
    // "serverfarms_stop_ASP_ccwrg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_stop_ASP_name'))]",
    // "serverfarms_submission_ASP_ccwrg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_submission_ASP_name'))]",
    // "serverfarms_textanalytics_ASP_ccwrg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_textanalytics_ASP_name'))]",
    // "sites_ccw_admin_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('domain_fa_name'))]",
    // "sites_ccw_application_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('stop_fa_name'))]",
    // "sites_ccw_document_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('submission_fa_name'))]",
    // "sites_ccw_payment_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('textanalytics_fa_name'))]",
    // "sites_ccw_schedule_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('sites_user_fa_name'))]",
    // "sites_ccw_userprofile_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('sites_user_fa_name'))]",
    // "storageAccounts_ccwctsa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_ctsa_name'))]",
    // "storageAccounts_ccwfnsa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_functionssa_name'))]",
    // "storageAccounts_ccwnsgflsa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_nsgflowlogssa_name'))]",
    // "storageAccounts_ccwuisa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_uisa_name'))]",
    // "vaults_ccw_kv_name": "[concat(parameters('agency_abbreviation'), parameters('application'), toLower(take(uniqueString(parameters('utcNowValue')), 3)), parameters('vaults_kv_name'))]",
    "virtualNetworks_ccw_vnet_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('virtualNetworks_vnet_name'))]",
    // "workspaces_ccw_laws_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('workspaces_laws_name'))]",
    "TA_Name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('accounts_ccwTA_name'))]",
    "privateDnsZones_privatelink_documents_azure_com_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-',''), parameters('privateDnsZones_privatelink_azure_com_name'))]",
    "privatednszones_a_name": "[concat(variables('cosmosdb_name'),'-', resourceGroup().location)]",
    "privateEndpoints_ccw_cdb_pe_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('privateEndpoints_cdb_pe_name'))]",
    "user_fa_keyvault_referencestring": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', variables('cdb_kv_primary_name'),')')]",
    "keyvault_secret_ccw_storage": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key3'),')')]",
    "textanalytics_fa_keyvault_referencestring": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key4'),')')]",
    "cssa_domain_url": "[concat('https://', parameters('application'), '-', parameters('agency_abbreviation'),'.cssa.cloud')]",
    "custom_domain_url": "[concat('https://', parameters('app_cname_alias'), '.', parameters('auth_fqdn'))]",
    "public_ui_url": "[if(equals(parameters('app_domain_type'), 'private_domain'), variables('custom_domain_url'), variables('cssa_domain_url'))]",
    "keyvault_secret_sftp_key": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key6'),')')]",
    "keyvault_secret_sftp_host": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key7'),')')]",
    "keyvault_secret_sftp_password": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key8'),')')]",
    "keyvault_secret_sftp_username": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key9'),')')]",
    // "keyvault_secret_cosmos_connection_string": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('keyvault_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key10'),')')]",
    "doj_inbound_folder": "[concat('/', parameters('doj_environment'), parameters('submission_fa_config_sftp_input_path'))]",
    "doj_outbound_folder": "[concat('/', parameters('doj_environment'), parameters('submission_fa_config_sftp_output_path'))]",

    // switch sub key for linking cosmosDB to dashboard
    "ext-dashboard-subscription-key": "[
      if(equals(parameters('environment_type'), 'PROD'), parameters('cssa_subscription_id'), 
        if(equals(parameters('environment_type'), 'QA'), parameters('cssa_subscription_id_uat'), parameters('cssa_subscription_id_dev')))]",

    "template_version": "#{TEMPLATE_VERSION}#",
    "default_tags": {
      "application": "ccw",
      "agency": "[parameters('agency_abbreviation')]",
      "agency_ori": "[parameters('agency_ori')]",
      "template_version": "[variables('template_version')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2019-06-01",
      "name": "[parameters('actionGroups_Application_Insights_Smart_Detection_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/actionGroups'), parameters('user_tags')['Microsoft.Insights/actionGroups'], json('{}')))]",
      "properties": {
        "groupShortName": "SmartDetect",
        "enabled": true,
        "emailReceivers": [],
        "smsReceivers": [],
        "webhookReceivers": [],
        "itsmReceivers": [],
        "azureAppPushReceivers": [],
        "automationRunbookReceivers": [],
        "voiceReceivers": [],
        "logicAppReceivers": [],
        "azureFunctionReceivers": [],
        "armRoleReceivers": [
          {
            "name": "Monitoring Contributor",
            "roleId": "749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "useCommonAlertSchema": true
          },
          {
            "name": "Monitoring Reader",
            "roleId": "43d0d8ad-25c7-4714-9337-8ba259a9fe05",
            "useCommonAlertSchema": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[variables('keyvault_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('api_userprofile_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.KeyVault/vaults'), parameters('user_tags')['Microsoft.KeyVault/vaults'], json('{}')))]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[parameters('kv_tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('api_userprofile_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('api_userprofile_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('api_admin_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('api_admin_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('api_application_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('api_application_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('api_document_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('api_document_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('api_payment_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('api_payment_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('api_schedule_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('api_schedule_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalytics_nsgfl_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalytics_reslogs_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalytics_weblogs_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_content_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_func_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "resourceAccessRules": [],
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_nsgflow_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_reslog_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_sws_publicui_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('sa_sws_adminui_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "azureFilesIdentityBasedAuthentication": {
          "directoryServiceOptions": "None"
        },
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServicePlan_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "B3",
        "tier": "Basic",
        "size": "B3",
        "family": "B",
        "capacity": 1
      },
      "kind": "linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-08-15",
      "name": "[variables('cosmosdb_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ccw_vnet_name'), concat(variables('virtualNetworks_ccw_vnet_name'), parameters('cdb_subnet_name')))]"
      ],
      "kind": "GlobalDocumentDB",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts'], json('{}')))]",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
          {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ccw_vnet_name'), concat(variables('virtualNetworks_ccw_vnet_name'), parameters('cdb_subnet_name')))]",
            "ignoreMissingVNetServiceEndpoint": true
          }
        ],
        "disableKeyBasedMetadataWriteAccess": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "cors": [],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "ipRules": [
          {
            "ipAddressOrRange": "0.0.0.0"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 60,
            "backupRetentionIntervalInHours": 168
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_appointments_db_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts/sqlDatabases'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts/sqlDatabases'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[variables('cdb_appointments_db_name')]"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_settings_db_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts/sqlDatabases'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts/sqlDatabases'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[variables('cdb_settings_db_name')]"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_users_db_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts/sqlDatabases'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts/sqlDatabases'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[variables('cdb_users_db_name')]"
        }
      }
    },
    //KeyVault Secrets
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_primary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').primaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_connstring_primary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').connectionStrings[0].connectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_secondary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').secondaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyvault_name'), '/', variables('cdb_kv_connstring_secondary_name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2022-08-15').connectionStrings[1].connectionString]"
      }
    },

    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key3'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "contentType": "domain storage connection string",
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ccwctsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwctsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key4'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(concat('Microsoft.CognitiveServices/accounts/',  variables('TA_Name')), '2017-04-18').key1]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key5'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(concat('Microsoft.CognitiveServices/accounts/',  variables('TA_Name')), '2017-04-18').key2]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key7'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_server')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key6'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_server_key')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key9'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_username')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyvault_name'), '/', parameters('vaults_kv_secrets_key8'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_password')]"
      }
    },

    // todo: name
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('location')]",
      "name": "[variables('insights_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalytics_weblogs_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_content_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_content_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_func_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_func_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_nsgflow_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_nsgflow_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_sws_adminui_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_sws_adminui_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "staticWebsite": {
          "enabled": true,
          "indexDocument": "index.html"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('sa_sws_publicui_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sa_sws_publicui_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "staticWebsite": {
          "enabled": true,
          "indexDocument": "index.html"
        }
      }
    },
    //CosmosDB appointments container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_appointments_db_name'),'/', variables('cdb_appointments_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_appointments_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_appointments_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    //CosmosDB agencies container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_settings_db_name'),'/', variables('cdb_agencies_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_settings_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_agencies_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    //cosmosDB applications container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_users_db_name'),'/', variables('cdb_applications_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_users_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_applications_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              },
              {
                "path": "/Application/UserEmail/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    //cosmosDB users container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('cosmosdb_name'), '/', variables('cdb_users_db_name'),'/', variables('cdb_users_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_name'), variables('cdb_users_db_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cdb_users_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              },
              {
                "path": "/email/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    // Admin API
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('api_admin_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
        "[resourceId('microsoft.insights/components', variables('insights_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('api_admin_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('api_admin_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).ConnectionString]"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_agencies_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_settings_db_name')]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('api_admin_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('api_admin_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('api_admin_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('api_admin_name'), '/', variables('api_admin_name'), parameters('wa_hostnamessl_ep_suff'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('api_admin_name'))]"
      ],
      "properties": {
        "siteName": "[variables('api_admin_name')]",
        "hostNameType": "Verified"
      }
    },
    // application api
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('api_application_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
        "[resourceId('microsoft.insights/components', variables('insights_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosdb_name'))]"
      ],
      "kind": "app,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('api_application_name'), variables('wa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('api_application_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).ConnectionString]"
            },
            {
              "name": "CosmosDb__ContainerName",
              "value": "[variables('cdb_agencies_container_name')]"
            },
            {
              "name": "CosmosDb__DatabaseName",
              "value": "[variables('cdb_settings_db_name')]"
            },
            {
              "name": "KeyVault__VaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[concat(variables('api_application_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('api_application_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('api_application_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "scmMinTlsVersion": "1.2",
        "ftpsState": "Disabled",
        "preWarmedInstanceCount": 0,
        "healthCheckPath": "/api/health",
        "functionsRuntimeScaleMonitoringEnabled": false,
        "minimumElasticInstanceCount": 0
      },
      {
        "type": "Microsoft.Web/sites/hostNameBindings",
        "apiVersion": "2022-03-01",
        "name": "[concat(variables('api_application_name'), '/', variables('api_application_name'), variables('wa_hostnamessl_ep_suff'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_application_name'))]"
        ],
        "properties": {
          "siteName": "[variables('api_application_name')]",
          "hostNameType": "Verified"
        }
      },
      // document api app
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-03-01",
        "name": "[variables('api_document_name')]",
        "location": "[parameters('location')]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
          "[resourceId('microsoft.insights/components', variables('insights_name'))]",
          "[resourceId('Microsoft.Storage/storageAccounts',variables('sa_content_name'))]"
        ],
        "kind": "app,linux",
        "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
        "properties": {
          "enabled": true,
          "hostNameSslStates": [
            {
              "name": "[concat(variables('api_document_name'), variables('wa_hostnamessl_ep_suff'))]",
              "sslState": "Disabled",
              "hostType": "Standard"
            },
            {
              "name": "[concat(variables('api_document_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
              "sslState": "Disabled",
              "hostType": "Repository"
            }
          ],
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
          "reserved": true,
          "isXenon": false,
          "hyperV": false,
          "siteConfig": {
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).InstrumentationKey]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).ConnectionString]"
              },
              {
                "name": "KeyVault__VaultUri",
                "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))).vaultUri]"
              },
              {
                "name": "Storage__AgencyContainerName",
                "value": "[variables('sa_ct_agency_name')]"
              },
              {
                "name": "Storage__PublicContainerName",
                "value": "[variables('sa_ct_public_name')]"
              }
            ],
            "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictionsUseMain": true
          },
          "scmSiteAlsoStopped": false,
          "clientAffinityEnabled": false,
          "clientCertEnabled": false,
          "clientCertMode": "Required",
          "hostNamesDisabled": false,
          "containerSize": 0,
          "dailyMemoryTimeQuota": 0,
          "httpsOnly": true,
          "redundancyMode": "None",
          "storageAccountRequired": false,
          "keyVaultReferenceIdentity": "SystemAssigned"
        }
      },
      {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('api_document_name'), '/web')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_document_name'))]"
        ],
        "properties": {
          "numberOfWorkers": 1,
          "defaultDocuments": [
            "Default.htm",
            "Default.html",
            "Default.asp",
            "index.htm",
            "index.html",
            "iisstart.htm",
            "default.aspx",
            "index.php",
            "hostingstart.html"
          ],
          "netFrameworkVersion": "v4.0",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "requestTracingEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": false,
          "remoteDebuggingVersion": "VS2019",
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": false,
          "publishingUsername": "$variables('api_document_name')",
          "azureStorageAccounts": {},
          "scmType": "None",
          "use32BitWorkerProcess": false,
          "webSocketsEnabled": false,
          "alwaysOn": false,
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": false
            }
          ],
          "loadBalancing": "LeastRequests",
          "experiments": {
            "rampUpRules": []
          },
          "autoHealEnabled": false,
          "cors": {
            "allowedOrigins": [ "*" ],
            "supportCredentials": false
          },
          "localMySqlEnabled": false,
          "ipSecurityRestrictions": [
            {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "tag": "Default",
              "priority": 1000,
              "name": "NoInternet",
              "description": "Stop all Internet traffic"
            },
            {
              "ipAddress": "Any",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny all",
              "description": "Deny all access"
            }
          ],
          "scmIpSecurityRestrictionsUseMain": true,
          "http20Enabled": false,
          "minTlsVersion": "1.2",
          "ftpsState": "AllAllowed",
          "reservedInstanceCount": 0
        }
      },
      {
        "type": "Microsoft.Web/sites/hostNameBindings",
        "apiVersion": "2022-03-01",
        "name": "[concat(variables('api_document_name'), '/', variables('api_document_name'), variables('wa_hostnamessl_ep_suff'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_document_name'))]"
        ],
        "properties": {
          "siteName": "[variables('api_document_name')]",
          "hostNameType": "Verified"
        }
      },
      // payment api app
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-03-01",
        "name": "[variables('api_payment_name')]",
        "location": "[parameters('location')]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
          "[resourceId('microsoft.insights/components', variables('insights_name'))]"
        ],
        "kind": "app,linux",
        "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
        "properties": {
          "enabled": true,
          "hostNameSslStates": [
            {
              "name": "[concat(variables('api_payment_name'), variables('wa_hostnamessl_ep_suff'))]",
              "sslState": "Disabled",
              "hostType": "Standard"
            },
            {
              "name": "[concat(variables('api_payment_name'), variables('wa_hostnamessl_scm_ep_suff'))]",
              "sslState": "Disabled",
              "hostType": "Repository"
            }
          ],
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
          "reserved": true,
          "isXenon": false,
          "hyperV": false,
          "siteConfig": {
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).InstrumentationKey]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).ConnectionString]"
              }
            ],
            "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictionsUseMain": true,
            "numberOfWorkers": 1
          },
          "scmSiteAlsoStopped": false,
          "clientAffinityEnabled": false,
          "clientCertEnabled": false,
          "clientCertMode": "Required",
          "hostNamesDisabled": false,
          "containerSize": 0,
          "dailyMemoryTimeQuota": 0,
          "httpsOnly": true,
          "redundancyMode": "None",
          "storageAccountRequired": false,
          "keyVaultReferenceIdentity": "SystemAssigned"
        }
      },
      {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('api_payment_name'), '/web')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_payment_name'))]"
        ],
        "properties": {
          "numberOfWorkers": 1,
          "defaultDocuments": [
            "Default.htm",
            "Default.html",
            "Default.asp",
            "index.htm",
            "index.html",
            "iisstart.htm",
            "default.aspx",
            "index.php",
            "hostingstart.html"
          ],
          "netFrameworkVersion": "v4.0",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "requestTracingEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": false,
          "remoteDebuggingVersion": "VS2019",
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": false,
          "publishingUsername": "$variables('api_payment_name')",
          "azureStorageAccounts": {},
          "scmType": "None",
          "use32BitWorkerProcess": false,
          "webSocketsEnabled": false,
          "alwaysOn": false,
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": false
            }
          ],
          "loadBalancing": "LeastRequests",
          "experiments": {
            "rampUpRules": []
          },
          "autoHealEnabled": false,
          "cors": {
            "allowedOrigins": [ "*" ],
            "supportCredentials": false
          },
          "localMySqlEnabled": false,
          "ipSecurityRestrictions": [
            {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "tag": "Default",
              "priority": 1000,
              "name": "NoInternet",
              "description": "Stop all Internet traffic"
            },
            {
              "ipAddress": "Any",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny all",
              "description": "Deny all access"
            }
          ],
          "scmIpSecurityRestrictionsUseMain": true,
          "http20Enabled": false,
          "minTlsVersion": "1.2",
          "scmMinTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "preWarmedInstanceCount": 0,
          "healthCheckPath": "/api/health",
          "functionsRuntimeScaleMonitoringEnabled": false,
          "minimumElasticInstanceCount": 0
        }
      },
      {
        "type": "Microsoft.Web/sites/hostNameBindings",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('api_payment_name'), '/', variables('api_payment_name'), parameters('wa_hostnamessl_ep_suff'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_payment_name'))]"
        ],
        "properties": {
          "siteName": "[variables('api_payment_name')]",
          "hostNameType": "Verified"
        }
      },
      // schedule api app
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2018-11-01",
        "name": "[variables('api_schedule_name')]",
        "location": "[parameters('location')]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwfnsa_name'))]",
          "[resourceId('microsoft.insights/components', variables('insights_name'))]"
        ],
        "kind": "functionapp,linux",
        "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
        "properties": {
          "enabled": true,
          "hostNameSslStates": [
            {
              "name": "[concat(variables('api_schedule_name'), parameters('fa_hostnamessl_ep_suff'))]",
              "sslState": "Disabled",
              "hostType": "Standard"
            },
            {
              "name": "[concat(variables('api_schedule_name'), parameters('fa_hostnamessl_scm_ep_suff'))]",
              "sslState": "Disabled",
              "hostType": "Repository"
            }
          ],
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlan_name'))]",
          "reserved": true,
          "isXenon": false,
          "hyperV": false,
          "siteConfig": {
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).InstrumentationKey]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[reference(concat('microsoft.insights/components/', variables('insights_name'))).ConnectionString]"
              },
              {
                "name": "TextAnalyticsEndpoint",
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('TA_Name'))).endpoint]"
              },
              {
                "name": "TextAnalyticsKey",
                "value": "[variables('textanalytics_fa_keyvault_referencestring')]"
              },
              {
                "name": "AllowedCategories",
                "value": "Age,Email,Person,PhoneNumber,Organization"
              },
              {
                "name": "MinimumConfidenceScore",
                "value": "80"
              },
              {
                "name": "ccw_app_id",
                "value": "[parameters('auth_app_id')]"
              },
              {
                "name": "ccw_tenant_id",
                "value": "[parameters('auth_tenant_id')]"
              },
              {
                "name": "ccw_tenant_name",
                "value": "[parameters('auth_fqdn')]"
              }
            ],
            "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictionsUseMain": true
          },
          "scmSiteAlsoStopped": false,
          "clientAffinityEnabled": false,
          "clientCertEnabled": false,
          "hostNamesDisabled": false,
          "containerSize": 1536,
          "dailyMemoryTimeQuota": 0,
          "httpsOnly": true,
          "redundancyMode": "None"
        }
      },
      {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('api_schedule_name'), '/web')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_schedule_name'))]"
        ],
        "properties": {
          "numberOfWorkers": 1,
          "defaultDocuments": [],
          "netFrameworkVersion": "v4.0",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "requestTracingEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": false,
          "remoteDebuggingVersion": "VS2019",
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": false,
          "publishingUsername": "$variables('sites_ccw_textanalytics_fa_name')",
          "azureStorageAccounts": {},
          "scmType": "None",
          "use32BitWorkerProcess": false,
          "webSocketsEnabled": false,
          "alwaysOn": false,
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": false
            }
          ],
          "loadBalancing": "LeastRequests",
          "experiments": {
            "rampUpRules": []
          },
          "autoHealEnabled": false,
          "cors": {
            "allowedOrigins": [ "*" ],
            "supportCredentials": false
          },
          "localMySqlEnabled": false,
          "ipSecurityRestrictions": [
            {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "tag": "Default",
              "priority": 1000,
              "name": "NoInternet",
              "description": "Stop all Internet traffic"
            },
            {
              "ipAddress": "Any",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny all",
              "description": "Deny all access"
            }
          ],
          "scmIpSecurityRestrictionsUseMain": true,
          "http20Enabled": false,
          "minTlsVersion": "1.2",
          "ftpsState": "AllAllowed",
          "reservedInstanceCount": 0
        }
      },
      {
        "type": "Microsoft.Web/sites/hostNameBindings",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('api_schedule_name'), '/', variables('api_schedule_name'), variables('wa_hostnamessl_ep_suff'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('api_schedule_name'))]"
        ],
        "properties": {
          "siteName": "[variables('api_schedule_name')]",
          "hostNameType": "Verified"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2021-01-01",
        "name": "[concat(variables('storageAccounts_ccwuisa_name'), '/default/$web')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ccwuisa_name'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwuisa_name'))]"
        ],
        "properties": {
          "defaultEncryptionScope": "$account-encryption-key",
          "denyEncryptionScopeOverride": false,
          "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2021-01-01",
        "name": "[concat(variables('storageAccounts_ccwfnsa_name'), '/default/azure-webjobs-hosts')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ccwfnsa_name'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwfnsa_name'))]"
        ],
        "properties": {
          "defaultEncryptionScope": "$account-encryption-key",
          "denyEncryptionScopeOverride": false,
          "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2021-01-01",
        "name": "[concat(variables('storageAccounts_ccwfnsa_name'), '/default/azure-webjobs-secrets')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ccwfnsa_name'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwfnsa_name'))]"
        ],
        "properties": {
          "defaultEncryptionScope": "$account-encryption-key",
          "denyEncryptionScopeOverride": false,
          "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2021-01-01",
        "name": "[concat(variables('storageAccounts_ccwnsgflsa_name'), '/default/insights-logs-networksecuritygroupflowevent')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ccwnsgflsa_name'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwnsgflsa_name'))]"
        ],
        "properties": {
          "defaultEncryptionScope": "$account-encryption-key",
          "denyEncryptionScopeOverride": false,
          "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2021-01-01",
        "name": "[concat(variables('storageAccounts_ccwfnsa_name'), '/default/scm-releases')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ccwfnsa_name'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ccwfnsa_name'))]"
        ],
        "properties": {
          "defaultEncryptionScope": "$account-encryption-key",
          "denyEncryptionScopeOverride": false,
          "publicAccess": "None"
        }
      },
      {
        // add Cosmos Key to dashboard via script
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2020-10-01",
        "name": "[concat(variables('sites_ccw_domain_fa_name'), '-', 'cssa-cosmos-dashboard-runonce-delete-me-dps')]",
        "location": "[parameters('location')]",
        "kind": "AzurePowerShell",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_name'))]"
        ],
        "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Resources/deploymentScripts'), parameters('user_tags')['Microsoft.Resources/deploymentScripts'], json('{}')))]",
        "properties": {
          "forceUpdateTag": "newGuid()",
          "containerSettings": {
            "containerGroupName": "[concat(variables('sites_ccw_domain_fa_name'), '-', 'ext-cosmos-dashboard')]"
          },
          "azPowerShellVersion": "3.0",
          "environmentVariables": [
            {
              "name": "DASHBOARD_COSMOS_PRIMARY_KEY",
              "secureValue": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('cosmosdb_name')), '2020-09-01').primaryMasterKey]"
            },
            {
              "name": "CSSA_SP_APP_ID",
              "secureValue": "#{CSSA_SP_APP_ID}#"
            },
            {
              "name": "CSSA_SP_SECRET",
              "secureValue": "#{CSSA_SP_SECRET}#"
            },
            {
              "name": "CSSA_TENANT_ID",
              "value": "#{CSSA_TENANT_ID}#"
            },
            {
              "name": "ETL_SUBSCRIPTION_ID",
              "value": "[variables('ext-dashboard-subscription-key')]"
            },
            {
              "name": "APPLICATION_NAME",
              "value": "[parameters('application')]"
            },
            {
              "name": "AGENCY_ABBREVIATION",
              "value": "[parameters('agency_abbreviation')]"
            },
            {
              "name": "ENVIRONMENT_TYPE",
              "value": "[parameters('environment_type')]"
            },
            {
              "name": "CSSA_DASHBOARD_KEY_VAULT_PREFIX",
              "value": "#{CSSA_DASHBOARD_KEY_VAULT_PREFIX}#"
            },
            {
              "name": "CSSA_DASHBOARD_KEY_VAULT_SUFFIX",
              "value": "#{CSSA_DASHBOARD_KEY_VAULT_SUFFIX}#"
            },
            {
              "name": "CSSA_DASHBOARD_KEY_VAULT_PROD",
              "value": "#{CSSA_DASHBOARD_KEY_VAULT_PROD}#"
            },
            {
              "name": "CSSA_DASHBOARD_SQL_SERVER_PREFIX",
              "value": "#{CSSA_DASHBOARD_SQL_SERVER_PREFIX}#"
            },
            {
              "name": "CSSA_DASHBOARD_SQL_SERVER_SUFFIX",
              "value": "#{CSSA_DASHBOARD_SQL_SERVER_SUFFIX}#"
            },
            {
              "name": "CSSA_DASHBOARD_SQL_SERVER_PROD",
              "value": "#{CSSA_DASHBOARD_SQL_SERVER_PROD}#"
            },
            {
              "name": "KV_SQL_SERVER_USER",
              "value": "#{KV_SQL_SERVER_USER}#"
            },
            {
              "name": "KV_SQL_SERVER_PWD",
              "value": "#{KV_SQL_SERVER_PWD}#"
            },
            {
              "name": "CSSA_DASHBOARD_RG_PREFIX",
              "value": "#{CSSA_DASHBOARD_RG_PREFIX}#"
            }
          ],
          "primaryScriptUri": "#{__TEMPLATE_VERSION_FORMATTED__-IMPORT-DASHBOARDDATA-PS1-SAS-URL}#",
          "supportingScriptUris": [],
          "timeout": "PT4H",
          "cleanupPreference": "OnExpiration",
          "retentionInterval": "PT4H"
        }
      },
      {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2020-10-01",
        "name": "[concat(parameters('agency_abbreviation'), '-cssa-dns-subdomain-runonce-delete-me-dps')]",
        "location": "[parameters('location')]",
        "kind": "AzureCLI",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccounts_ccwuisa_name'), 'default', '$web')]"
        ],
        "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Resources/deploymentScripts'), parameters('user_tags')['Microsoft.Resources/deploymentScripts'], json('{}')))]",
        "properties": {
          "forceUpdateTag": "newGuid()",
          "containerSettings": {
            "containerGroupName": "[concat(parameters('agency_abbreviation'), '-cssa-dns-subdomain-runonce-delete-me-dps')]"
          },
          "storageAccountSettings": {
            "storageAccountName": "#{CSSA_STORAGE_ACCOUNT_NAME}#",
            "storageAccountKey": "#{CSSA_STORAGE_ACCOUNT_KEY}#"
          },
          "azCliVersion": "2.23.0",
          "environmentVariables": [
            {
              "name": "CLOUD_TYPE",
              "value": "AzureUSGovernment"
            },
            {
              "name": "CSSA_SP_APP_ID",
              "secureValue": "#{CSSA_SP_APP_ID}#"
            },
            {
              "name": "CSSA_SP_SECRET",
              "secureValue": "#{CSSA_SP_SECRET}#"
            },
            {
              "name": "CSSA_TENANT_ID",
              "value": "#{CSSA_TENANT_ID}#"
            },
            {
              "name": "CSSA_SHD_SUBSCRIPTION_ID",
              "value": "#{CSSA_SHD_SUBSCRIPTION_ID}#"
            },
            {
              "name": "CSSA_RESOURCE_GROUP_NAME",
              "value": "#{CSSA_RESOURCE_GROUP_NAME}#"
            },
            {
              "name": "CSSA_CERT_KEY_VAULT_RG",
              "value": "#{CSSA_CERT_KEY_VAULT_RG}#"
            },
            {
              "name": "CSSA_CERT_KEY_VAULT_NAME",
              "value": "#{CSSA_CERT_KEY_VAULT_NAME}#"
            },
            {
              "name": "CSSA_CERT_SECRET_NAME",
              "value": "#{CSSA_CERT_SECRET_NAME}#"
            },
            {
              "name": "CSSA_CERT_SECRET_VERSION",
              "value": "#{CSSA_CERT_SECRET_VERSION}#"
            },
            {
              "name": "CSSA_CDN_PROFILE_NAME",
              "value": "#{CSSA_CDN_PROFILE_NAME}#"
            },
            {
              "name": "CSSA_DNS_ROOT_ZONE",
              "value": "#{CSSA_DNS_ROOT_ZONE}#"
            },
            {
              "name": "AGENCY_ORI",
              "value": "[parameters('agency_ori')]"
            },
            {
              "name": "AGENCY_ABBREVIATION",
              "value": "[parameters('agency_abbreviation')]"
            },
            {
              "name": "APPLICATION_SUBSCRIPTION_ID",
              "value": "[subscription().subscriptionId]"
            },
            {
              "name": "APPLICATION_RESOURCE_GROUP_NAME",
              "value": "[resourceGroup().Name]"
            },
            {
              "name": "APPLICATION_NAME",
              "value": "[parameters('application')]"
            },
            {
              "name": "APPLICATION_UI_SA_NAME",
              "value": "[variables('storageAccounts_ccwuisa_name')]"
            },
            {
              "name": "APP_DOMAIN_TYPE",
              "value": "[parameters('app_domain_type')]"
            },
            {
              "name": "CUSTOM_PRIMARY_DOMAIN",
              "value": "[parameters('primary_domain')]"
            },
            {
              "name": "CUSTOM_APP_CNAME_ALIAS",
              "value": "[parameters('app_cname_alias')]"
            },
            {
              "name": "CUSTOM_CERT_KEY_VAULT_RID",
              "value": "[parameters('certificate_key_vault_rid')]"
            },
            {
              "name": "CUSTOM_CERT_SECRET_NAME",
              "value": "[parameters('certificate_secret_name')]"
            }
          ],
          "primaryScriptUri": "#{__TEMPLATE_VERSION_FORMATTED__-NEW-ccw-CSSA-SUB-DOMAIN-SH-SAS-URL}#",
          "supportingScriptUris": [],
          "timeout": "PT4H",
          "cleanupPreference": "OnExpiration",
          "retentionInterval": "PT4H"
        }
      },
      {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2020-10-01",
        "name": "[concat(parameters('agency_abbreviation'), '-cssa-app-import-runonce-delete-me-dps')]",
        "location": "[parameters('location')]",
        "kind": "AzurePowerShell",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccounts_ccwuisa_name'), 'default', '$web')]",
          "[resourceId('Microsoft.Web/sites/config', variables('sites_ccw_domain_fa_name'), 'web')]",
          "[resourceId('Microsoft.Web/sites/config', variables('sites_ccw_stop_fa_name'), 'web')]",
          "[resourceId('Microsoft.Web/sites/config', variables('sites_ccw_submission_fa_name'), 'web')]",
          "[resourceId('Microsoft.Web/sites/config', variables('sites_ccw_textanalytics_fa_name'), 'web')]",
          "[resourceId('Microsoft.Web/sites/config', variables('sites_ccw_user_fa_name'), 'web')]",
        ],
        "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Resources/deploymentScripts'), parameters('user_tags')['Microsoft.Resources/deploymentScripts'], json('{}')))]",
        "properties": {
          "forceUpdateTag": "newGuid()",
          "containerSettings": {
            "containerGroupName": "[concat(parameters('agency_abbreviation'), '-cssa-app-import-runonce-delete-me-dps')]"
          },
          "storageAccountSettings": {
            "storageAccountName": "#{CSSA_STORAGE_ACCOUNT_NAME}#",
            "storageAccountKey": "#{CSSA_STORAGE_ACCOUNT_KEY}#"
          },
          "azPowerShellVersion": "3.0",
          "environmentVariables": [
            {
              "name": "CSSA_SP_APP_ID",
              "secureValue": "#{CSSA_SP_APP_ID}#"
            },
            {
              "name": "CSSA_SP_SECRET",
              "secureValue": "#{CSSA_SP_SECRET}#"
            },
            {
              "name": "CSSA_TENANT_ID",
              "value": "#{CSSA_TENANT_ID}#"
            },
            {
              "name": "APP_SUBSCRIPTION_ID",
              "value": "[subscription().subscriptionId]"
            },
            {
              "name": "APP_RESOURCE_GROUP_NAME",
              "value": "[resourceGroup().name]"
            },
            {
              "name": "AUTH_SP_APP_ID",
              "value": "[parameters('auth_app_id')]"
            },
            {
              "name": "AUTH_TENANT_ID",
              "value": "[parameters('auth_tenant_id')]"
            },
            {
              "name": "AUTH_AUTHORITY",
              "value": "[parameters('auth_authority')]"
            },
            {
              "name": "AUTH_PRIMARY_DOMAIN",
              "value": "[parameters('auth_fqdn')]"
            },
            {
              "name": "AGENCY_ABBREVIATION",
              "value": "[parameters('agency_abbreviation')]"
            },
            {
              "name": "APPLICATION_NAME",
              "value": "[parameters('application')]"
            },
            // {
            //   "name": "STORAGE_ACCOUNT_NAME",
            //   "value": "[variables('storageAccounts_ccwuisa_name')]"
            // },
            {
              "name": "DEFAULT_COUNTY",
              "value": "[parameters('agency_county')]"
            },
            {
              "name": "ENVIRONMENT_TYPE",
              "value": "[parameters('environment_type')]"
            },
            {
              "name": "ENABLE_BEATS",
              "value": "[parameters('enable_beats')]"
            },
            {
              "name": "MODIFY_BEAT_ID",
              "value": "[parameters('modify_beat_id')]"
            },
            {
              "name": "DISPLAY_REPORTING_EMAIL",
              "value": "[parameters('display_reporting_email')]"
            },
            {
              "name": "REPORTING_EMAIL_ADDRESS",
              "value": "[parameters('reporting_email_address')]"
            },
            {
              "name": "BEAT_ID_NUMBER_OF_DIGITS",
              "value": "[parameters('beat_id_number_of_digits')]"
            },
            {
              "name": "ENABLE_STOP_DEBUGGER",
              "value": "[parameters('enable_stop_debugger')]"
            },
            {
              "name": "USE_OFFICER_UPN",
              "value": "[parameters('use_officer_upn')]"
            },
            {
              "name": "DEPLOY_WEB_CONFIG_JSON",
              "value": "True"
            },
            {
              "name": "TEMPLATE_VERSION_FORMATTED",
              "value": "#{TEMPLATE_VERSION_FORMATTED}#"
            }
          ],
          "primaryScriptUri": "#{__TEMPLATE_VERSION_FORMATTED__-IMPORT-ALLccwAPPLICATIONS-PS1-SAS-URL}#",
          "supportingScriptUris": [
            "#{__TEMPLATE_VERSION_FORMATTED__-NEW-FUNCTIONHOSTKEY-PSM1-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-CONFIG-JSON-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-DOMAIN-ZIP-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-STOP-ZIP-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-SUBMISSION-ZIP-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-TEXTANALYTICS-ZIP-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-USERPROFILE-ZIP-SAS-URL}#",
            "#{__TEMPLATE_VERSION_FORMATTED__-UI-ZIP-SAS-URL}#"
          ],
          "timeout": "PT4H",
          "cleanupPreference": "OnExpiration",
          "retentionInterval": "PT4H"
        }
      }
  ],
  "outputs": {
    "resourcegroup_name": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "key_vault_name": {
      "type": "string",
      "value": "[variables('keyvault_name')]"
    },
    "subscription": {
      "type": "object",
      "value": "[subscription()]"
    },
    "cosmosdb_name": {
      "type": "string",
      "value": "[variables('cosmosdb_name')]"
    },
    "functionapp_name": {
      "type": "string",
      "value": "[variables('sites_ccw_user_fa_name')]"
    },
    "tags": {
      "type": "Object",
      "value": "[variables('default_tags')]"
    }
  }
}
