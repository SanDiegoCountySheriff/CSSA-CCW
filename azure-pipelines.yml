# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
   include:
      - main
  paths:
    include:
      - UI/*
      - Deployment/Pipelines/azure-pipeline-ui.yml

pr:
  - main

variables:
  DATE_COUNTER: $[counter(format('UI{0:yyyy}{0:MM}{0:dd}', pipeline.startTime), 1)]
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: $(git rev-parse HEAD~1)
  HEAD_SHA: $(git rev-parse HEAD)

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: "Build"

    jobs: 
      - job: job_1
        displayName: "Building CCW UI Project"

        steps:
        - task: NodeTool@0
          displayName: "Install Node.js"
          inputs:
           versionSpec: '14.x'

        - script: rm -rf "node_modules"
          displayName: "Purge node modules)"
          continueOnError: true
          workingDirectory: UI/
        
        - task: Npm@1
          displayName: "npm ci"
          inputs:
            command: 'ci'
            workingDir: 'UI/'

        - script: npx nx run-many --target=build --prod --projects=admin,public --runner=ci --parallel=3 --verbose
          displayName: "nx build"
          continueOnError: false
          workingDirectory: 'UI/'

        - bash: | 
            if [ -d $(Build.SourcesDirectory)/UI/dist/apps/admin ]; then
              echo "##vso[task.setVariable variable=FILEEXISTS1]true"
            fi

        - task: CopyFiles@2
          displayName: "Copy Admin Config"
          condition: eq(variables.FILEEXISTS1, 'true')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/UI/apps/admin'
            Contents: '*.config.json'
            TargetFolder: '$(Build.SourcesDirectory)/UI/dist/apps/admin'

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS1, 'true')
          displayName: "Archive UI Admin Build files"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/dist/apps/admin'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-admin.zip'
            replaceExistingArchive: true

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS1, 'true')
          displayName: "Archive Admin Config"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/apps/admin/config'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-admin-config.zip'
            replaceExistingArchive: true

        - bash: | 
            if [ -d $(Build.SourcesDirectory)/UI/dist/apps/admin ]; then
              echo "##vso[task.setVariable variable=FILEEXISTS2]true"
            fi

        - task: CopyFiles@2
          displayName: "Copy Public Config"
          condition: eq(variables.FILEEXISTS2, 'true')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/UI/apps/public'
            Contents: '*.config.json'
            TargetFolder: '$(Build.SourcesDirectory)/UI/dist/apps/public'

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS2, 'true')
          displayName: "Archive UI Public Build Files"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/dist/apps/public'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-public.zip'
            replaceExistingArchive: true

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS2, 'true')
          displayName: "Archive Public Config"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/apps/public/config'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-public-config.zip'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifacts"
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'