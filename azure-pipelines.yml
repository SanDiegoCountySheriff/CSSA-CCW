# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
   include:
      - main
  paths:
    include:
      - UI/*
      - Deployment/Pipelines/azure-pipeline-ui.yml

variables:
  DATE_COUNTER: $[counter(format('UI{0:yyyy}{0:MM}{0:dd}', pipeline.startTime), 1)]
  NX_HEAD: "origin/main~1"
  NX_MAIN: "origin/main"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: "Build"

    jobs: 
      - job: job_1
        displayName: "Building UI Project"

        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '14.x'
          displayName: 'Install Node.js'

        - script: rm -rf "UI/node_modules"
          displayName: "Purge node packages"
          continueOnError: true
          workingDirectory: $(Build.SourcesDirectory)

        - task: Npm@1
          displayName: "npm install Nx"
          inputs:
            command: 'custom'
            workingDir: 'UI/'
            customCommand: 'install -g nx'

        - task: Npm@1
          displayName: "npm ci"
          inputs:
            command: 'ci'
            workingDir: 'UI/'

        - script: nx affected --base= ${NX_BASE} --head= ${NX_HEAD} --target=build
          displayName: "nx build"
          continueOnError: false
          workingDirectory: 'UI/'

        - bash: | 
            if [ -d $(Build.SourcesDirectory)/UI/dist/apps/admin ]; then
              echo "##vso[task.setVariable variable=FILEEXISTS1]true"
            fi

        - task: CopyFiles@2
          condition: eq(variables.FILEEXISTS1, 'true')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/UI/apps/admin'
            Contents: '*.config.json'
            TargetFolder: '$(Build.SourcesDirectory)/UI/dist/apps/admin'

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS1, 'true')
          displayName: "Archive UI Admin Files"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/dist/apps/admin'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-admin.zip'
            replaceExistingArchive: true

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS1, 'true')
          displayName: "Archive Admin config Files"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/apps/admin/config'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-admin-config.zip'
            replaceExistingArchive: true

        - bash: | 
            if [ -d $(Build.SourcesDirectory)/UI/dist/apps/admin ]; then
              echo "##vso[task.setVariable variable=FILEEXISTS2]true"
            fi

        - task: CopyFiles@2
          condition: eq(variables.FILEEXISTS2, 'true')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/UI/apps/public'
            Contents: '*.config.json'
            TargetFolder: '$(Build.SourcesDirectory)/UI/dist/apps/public'

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS2, 'true')
          displayName: "Archive UI Public Files"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/dist/apps/public'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-public.zip'
            replaceExistingArchive: true

        - task: ArchiveFiles@2
          condition: eq(variables.FILEEXISTS2, 'true')
          displayName: "Archive Public config Files"
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/UI/apps/public/config'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-public-config.zip'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifacts"
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'